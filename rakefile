# usage
# -----
#
# uses .rakefile.yaml which specifies
#   - target_file that we're monitoring
#   - title of the book
#   - expected word count
#  two modes:
#      - regular:         rake
#      - chapter listing: rake chapters
#
#  can also be supplied with a git hash, to apply to an earlier version
#      - regular:         rake default[047b60168aa7ee1ba2d1d9cd515ddf749ccee8f3]
#      - chapter listing: rake chapters[047b60168aa7ee1ba2d1d9cd515ddf749ccee8f3]

require 'date'
require 'yaml'

class Numeric
  # from
  #   http://pleac.sourceforge.net/pleac_ruby/numbers.html
  def commify
    self.to_s =~ /([^\.]*)(\..*)?/
    int, dec = $1.reverse, $2 ? $2 : ""
    while int.gsub!(/(,|\.|^)(\d{3})(\d)/, '\1\2,\3')
    end
    int.reverse + dec
  end
end


## read config file#
configfile = "./.rakefile.yaml"
if FileTest.exists?(configfile)
  config  = YAML.load_file(configfile)
else
  config  = { :target_file => "story.txt",
              :title =>"unknown title",
              :target_words => 125000,
              :date_start => "1 Jan 1970"
            }
end

$target_file = config[:target_file]
title = config[:title]
target_words = config[:target_words]
date_start        = Date.parse(config[:date_start])

unused_file       = "unused_text.txt"  # where we store unused snippets of text
words_per_page    = 250

# how big a chapter has to be before we consider that it's been started
$size_cutoff_chapter = config[:size_cuttoff_chapter] || 500

# chapter_words  - hash of chapter numbers -> words in each chapter
# chapter_titles - hash of chapter numbers -> titles
# done           - number of finished chapters
# notdone        - number of unfinished chapters
# avg            - avg wordsize of finished chapters
# std_dev        - std dev of chapter size

def get_chapter_hash(config, git_hash)

  if git_hash
    `git show #{git_hash}:#{$target_file} > /tmp/oldver.txt`
    file = File.open("/tmp/oldver.txt", "r")
  else
    file = File.open($target_file, "r")
  end
  contents = file.read

  chapter_head_tag = config[:chapter_head_tag] || "== chapter"
  arr = contents.split(chapter_head_tag)
  arr = arr.slice(1..9999)

  chapter_words = {}
  chapter_arrows = {}
  chapter_titles = {}
  ii = 0
  arr.each do |text|
    ii += 1
    title_line = text.split("\n")[0]
    title_line.match(/ (\d+)/)
    chapter_num_str = $1

    # bug: drop the first line here
    if chapter_num_str
      chap_num = $1.to_i
    else
      chap_num = ii
    end

    raise "*** error: duplicate chapter #{chap_num}" unless chapter_words[chap_num].nil?
    word_count = text.split.size


    chapter_words[chap_num] = word_count

    chapter_arrows[chap_num] = text.match?(/<---/)

    title = title_line.split(":")[1]
    chapter_titles[chap_num] = title

  end


  done = chapter_words.select { |ch,words|  words > $size_cutoff_chapter}.count
  done = 1 if done == 0
  notdone = chapter_words.size - done
  
  avg = chapter_words.select { |ch,words|  words > $size_cutoff_chapter}.sum{|ch,words| words} / done

  # compute std dev
  #
  variance_array = chapter_words.select { |ch,words|  words > $size_cutoff_chapter}.map{|ch,words| (words - avg) }

  std_dev = variance_array.size == 0 ? 0 :   Math.sqrt(variance_array.sum { |v| v ** 2} / variance_array.size)

  return { :chapter_words => chapter_words,
           :chapter_titles =>chapter_titles,
          :chapter_arrows =>chapter_arrows,
           :done          => done,
           :notdone       => notdone,
           :avg           => avg,
           :std_dev       => std_dev  }
  
end

task :init do
  yaml_file = ".rakefile.yaml"
  if FileTest.exists?(yaml_file)
    puts "*** #{yaml_file} already exists; just edit it"
  end
  File.open(yaml_file, "w") do |file|
    file.write(<<-STRING
---
:target_file: ./story.txt
:title: "title goes here"
:target_words: 125000
:date_start: '#{Date.today}'
:chapter_head_tag: '** chapter'
STRING
              )
  end
  puts "created file ./#{yaml_file}"
end


# takes an optional git hash in case you've already committed the files and still want to run the command
#
# without git hash spec:
#   rake
#
# with git hash spec:
#   rake default[047b60168aa7ee1ba2d1d9cd515ddf749ccee8f3]
#
task :default, [:git_hash] do |t, args|

  verbose = false

  # setup: figure out how to get the text of target version and previous version 
  #
  cat_str =  if args[:git_hash]
               "git show #{args[:git_hash]}:./#{$target_file}"
             else
               "cat #{$target_file}"
             end
  
  cat_prev_str = if args[:git_hash]
                   "git show #{args[:git_hash]}^1:#{$target_file}"
                 else
                   "git show HEAD:./#{$target_file}"
                 end



  
  # XXX maybe rewrite this function to use 'cat_str' ???
  #
  ret = get_chapter_hash(config, args[:git_hash])
  actual_chapters = ret[:done]
  target_chapters   = ret[:done] + ret[:notdone]

  
  actual_words     = `#{cat_str}  | wc -w`.to_i
  
  
  to_go_words = target_words - actual_words

  percent_words    =  actual_words * 1.0 / target_words
  percent_chapters =  actual_chapters * 1.0 / target_chapters

  # date and rate
  #
  days_since_start = (Date.today - date_start).to_i + 1
  write_rate       = (actual_words / days_since_start ).to_i || 1
  to_go_days       = to_go_words / write_rate



  
  xxx_count_now =   ` #{cat_str} | grep "XXX" | wc -l`.to_i
  yyy_count_now =   ` #{cat_str} | grep "YYY" | wc -l`.to_i
  zzz_count_now =   ` #{cat_str} | grep "ZZZ" | wc -l`.to_i


  xxx_count_prev =   ` #{cat_prev_str} | grep "XXX" | wc -l`.to_i

  yyy_count_prev =   ` #{cat_prev_str} | grep "YYY" | wc -l`.to_i
  zzz_count_prev =   ` #{cat_prev_str} | grep "ZZZ" | wc -l`.to_i

  xxx_diff = xxx_count_now - xxx_count_prev
  yyy_diff = yyy_count_now - yyy_count_prev
  zzz_diff = zzz_count_now - zzz_count_prev

  xxx_diff_str = "#{xxx_diff >= 0 ? "+" : ""}#{xxx_diff}"
  yyy_diff_str = "#{yyy_diff >= 0 ? "+" : ""}#{yyy_diff}"
  zzz_diff_str = "#{yyy_diff >= 0 ? "+" : ""}#{zzz_diff}"
  


  if verbose 
    puts "cat_str = #{cat_str}"
    puts "cat_prev_str = #{cat_prev_str}"
    
    puts "xxx_count_now = #{xxx_count_now}"
    puts "yyy_count_now = #{yyy_count_now}"
    puts "zzz_count_now = #{zzz_count_now}"
    
    puts "xxx_count_prev = #{xxx_count_prev}"
    puts "yyy_count_prev = #{yyy_count_prev}"
    puts "zzz_count_prev = #{zzz_count_prev}"

  end
  
  # XXX rewrite this to use "cat_str" and "cat_prev_str"
  #

  # the '--text' flag to grep forces grep to consider input as text.  This
  # is useful in case the file somehow has a non ASCII character, and the git diff 
  # would  merely say "binary files match / don't match"
  # and then grep would not see any \+ or \- in the output
  # and thus report "0 words added / deleted"
  #
  words_minus      = File.file?($target_file) ?
                       `git diff  #{args[:git_hash]} #{$target_file}  | grep --text "^\-" | wc -w`.to_i
                       : 0
  words_plus       = File.file?($target_file) ?
                       `git diff  #{args[:git_hash]} #{$target_file}  | grep --text "^\+" | wc -w`.to_i
                       : `wc -w $target_file`
  words_delta      = words_plus - words_minus

  unused_minus      = File.file?(unused_file) ?
                        `git diff  #{args[:git_hash]} #{unused_file}  | grep --text "^\-" | wc -w`.to_i
                        : 0
  unused_plus       = File.file?(unused_file) ?
                        `git diff  #{args[:git_hash]} #{unused_file}  | grep --text "^\+" | wc -w`.to_i
                        : 0 
  unused_delta      = unused_plus - unused_minus

  if verbose

    puts "words_minus #{words_minus}"
    puts "words_plus #{words_plus}"

  end

  # XXX this is wrong ; doesn't work when a hash is passed in
  revised_words_before = `git show #{args[:git_hash]||'HEAD'}:./#{$target_file} | grep "<---" -B 100000 | wc -w`.to_i
  revised_words = `cat #{$target_file} | grep "<---" -B 100000 | wc -w`.to_i
  revised_words_delta = revised_words - revised_words_before
  revised_fraction = revised_words   * 1.000  / actual_words
  if revised_words > 0
    revise_rate      = (revised_words / days_since_start ).to_i || 1
    to_revise_words  = actual_words - revised_words
    to_go_days       = to_revise_words / revise_rate
  end
  
  puts ""
  puts "  +--------------------"
  puts "  | #{title}"
  puts "  |"
  puts "  | story :    #{actual_words.commify} / #{target_words&.commify}  words ( #{sprintf('%0.2f', percent_words * 100)} % )"
  puts "  |            #{actual_words / words_per_page} / #{target_words / words_per_page}  pages"
  puts "  |            #{actual_chapters} / #{target_chapters} chapters ( #{sprintf('%0.2f', percent_chapters * 100)} % )"
  puts "  | "

  
  # draft 2 - use the '<---' flag
  if revised_words > 0
    puts "  | today's revision:  #{revised_words_delta > 0 ? "+" : ""}#{revised_words_delta.commify} words"
    puts "  | days since start:  #{days_since_start}"
    puts "  | average rate:      #{revise_rate.commify} words / day"
    puts "  | revised:           #{revised_words.commify} / #{actual_words.commify} words ( #{sprintf('%0.2f', revised_fraction * 100)} % )"
    puts "  | to go:             #{to_revise_words.commify} words ;  #{to_go_days.commify} days ( #{(Date.today + to_go_days).strftime('%d %b %Y')} )"
    puts "  | "    

  end 

  if false && ( xxx_count_now > 0 || yyy_count_now > 0 || xxx_count_prev > 0 || yyy_count_prev > 0)
    puts "  | xxx:              #{xxx_count_now} (#{xxx_diff_str})"
    puts "  | yyy:              #{yyy_count_now} (#{yyy_diff_str})"
    puts "  | zzz:              #{zzz_count_now} (#{zzz_diff_str})"
    puts "  | "
  end
  
  puts "  | moved to unused:    #{words_delta > 0 ? "+" : ""}#{unused_delta.commify}"
  puts "  | "
  puts "  | today's word delta: #{words_delta > 0 ? "+" : ""}#{words_delta.commify}   (+#{words_plus.commify} -#{words_minus.commify})"
  puts "  | days since start:   #{days_since_start}"
  puts "  | average rate:       #{write_rate.commify} words / day"
  if revised_words == 0
    puts "  | to go:              #{to_go_words.commify} words ;  #{to_go_days.commify} days ( #{(Date.today + to_go_days).strftime('%d %b %Y')} )"
  end

  puts "  +--------------------"
  puts ""



end


# alias
task :ch => :chapters
 
task :chapters, [:git_hash] do |t, args|

  ret           = get_chapter_hash(config, args[:git_hash])

  done           = ret[:done]
  notdone        = ret[:notdone]
  avg            = ret[:avg]
  chapter_words  = ret[:chapter_words]
  chapter_titles = ret[:chapter_titles]
  std_dev        = ret[:std_dev]
  arrows         = ret[:chapter_arrows]

  puts ""
  puts "  +--------------------"
  puts "  | #{title}"
  puts "  | "
  puts "  |  ch                                             words      stddevs"
  puts "  |  ---------------------------------------------------------------"
    chapter_words.each_pair do |num, words|
      sigma = std_dev == 0.0 ? 0 : ((words - avg).abs / std_dev).floor
	  ch_done  = words > $size_cutoff_chapter ? "✓" : " " 
      puts "  | #{sprintf('%3i', num) }  #{ch_done} #{sprintf('%-38s', chapter_titles[num][0...38])} #{sprintf('%6s',words.commify)}    #{ sprintf('%5s',(words > avg ? "+":"-") * sigma)}     #{arrows[num] ? "<--" : ""}"
  end

  
  puts "  |\n"
  puts "  |\n"
  puts "  | * #{done} chapters done, avg words = #{avg.commify}"
  puts "  | * stddev = #{std_dev.floor.commify}"
  puts "  | * #{notdone} chapters not done"
  puts "  | * target words @ this rate = #{ ((chapter_words.size * avg) ).commify}"
  puts "  | * target pages @ this rate = #{ ((chapter_words.size * avg) / 250).commify}"
  puts "  +--------------------"
  puts ""
end

task :clean do |t|
  `rm  '##{$target_file}#' '##{$target_file}' o 2> /dev/null`
end

# task :todo do |t|
#   puts `cat #{outline_file}  | grep "* ============== 2A" -B 100000 | grep "\\(^\*\\|TODO\\)" `
# end

task :outlines do |t|
  subdir = "./notes/outlines/"
  [
    "06c_outline_wyatt.txt" ,
    "13_domestic.txt" ].each do |f|
    infile_name = "#{subdir}#{f}"

    puts "========== #{infile_name}"
    count = 0
    first = true
    File.open(infile_name, "r") do |infile_h|
      
      while (line = infile_h.gets)
        if line.match(/^\*\* /)
          if first
            first = false
          else
            puts "scene = #{count}"
            count = 0
          end
          puts  line
        elsif line.match(/^\s*scene/)
          count += 1
        end
      end
    end
    puts "scene = #{count}"
  end
end

task :clean do
  `rm -f *~ .*~ #* .\#* '\#*' `
end

# regression tests for the tool
task self_test: [ :init ] do
  puts "here"
  open("story.txt", "w") { |f| f << <<~ENDSTRING
         ** chapter 1: one
         foo bar baz
         ** chapter 2: two
         foo bar baz foo bar baz
         ENDSTRING
         ** chapter 3: thre
         foo bar baz foo bar baz baz baz baz
         ENDSTRING
  }
  `rake > output.txt`
  # `rm ./.rakefile.yaml ./story.txt ./output.txt`
  
end
